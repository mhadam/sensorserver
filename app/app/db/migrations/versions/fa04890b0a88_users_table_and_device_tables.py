"""users table and device tables

Revision ID: fa04890b0a88
Revises: e499c7b8b338
Create Date: 2021-09-23 01:15:49.228518

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
import fastapi_users.db

# revision identifiers, used by Alembic
revision = "fa04890b0a88"
down_revision = "e499c7b8b338"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "device_block",
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column("device_id", sa.Text(), nullable=False),
        sa.Column("ip_address", sa.Text(), nullable=False),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("device_id", "ip_address"),
    )
    op.create_index(
        op.f("ix_device_block_device_id"), "device_block", ["device_id"], unique=False
    )
    op.create_table(
        "device_request",
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column("device_id", sa.Text(), nullable=False),
        sa.Column("ip_address", sa.Text(), nullable=False),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("device_id", "ip_address"),
    )
    op.create_index(
        op.f("ix_device_request_device_id"),
        "device_request",
        ["device_id"],
        unique=False,
    )
    op.create_table(
        "users",
        sa.Column("id", fastapi_users.db.sqlalchemy.GUID(), nullable=False),
        sa.Column("email", sa.String(length=320), nullable=False),
        sa.Column("hashed_password", sa.String(length=72), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("is_superuser", sa.Boolean(), nullable=False),
        sa.Column("is_verified", sa.Boolean(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_users_email"), "users", ["email"], unique=True)
    op.create_table(
        "device_auth",
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column("device_id", sa.Text(), nullable=False),
        sa.Column("user_id", fastapi_users.db.sqlalchemy.GUID(), nullable=False),
        sa.Column("ip_address", sa.Text(), nullable=False),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("device_id", "ip_address"),
    )
    op.create_index(
        op.f("ix_device_auth_device_id"), "device_auth", ["device_id"], unique=False
    )
    op.drop_index("ix_device_allow_device_id", table_name="device_allow")
    op.drop_table("device_allow")
    op.drop_index("ix_user_email", table_name="user")
    op.drop_table("user")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "device_allow",
        sa.Column("id", sa.BIGINT(), autoincrement=True, nullable=False),
        sa.Column("device_id", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column("user_id", postgresql.UUID(), autoincrement=False, nullable=False),
        sa.Column("ip_address", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
            name="device_allow_user_id_fkey",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name="device_allow_pkey"),
    )
    op.create_index(
        "ix_device_allow_device_id", "device_allow", ["device_id"], unique=False
    )
    op.create_table(
        "user",
        sa.Column("id", postgresql.UUID(), autoincrement=False, nullable=False),
        sa.Column("email", sa.VARCHAR(length=320), autoincrement=False, nullable=False),
        sa.Column(
            "hashed_password",
            sa.VARCHAR(length=72),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("is_active", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column("is_superuser", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column("is_verified", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.PrimaryKeyConstraint("id", name="user_pkey"),
    )
    op.create_index("ix_user_email", "user", ["email"], unique=False)
    op.drop_index(op.f("ix_device_auth_device_id"), table_name="device_auth")
    op.drop_table("device_auth")
    op.drop_index(op.f("ix_users_email"), table_name="users")
    op.drop_table("users")
    op.drop_index(op.f("ix_device_request_device_id"), table_name="device_request")
    op.drop_table("device_request")
    op.drop_index(op.f("ix_device_block_device_id"), table_name="device_block")
    op.drop_table("device_block")
    # ### end Alembic commands ###
